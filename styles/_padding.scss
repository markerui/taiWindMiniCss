@mixin padding-variant($name, $value) {
	@if $name==default {
		.p-x {
			padding-left: $value + $unit;
			padding-right: $value + $unit;
		}

		.p-y {
			padding-top: $value + $unit;
			padding-bottom: $value + $unit;
		}

		.p-t {
			padding-top: $value + $unit;
		}

		.p-b {
			padding-bottom: $value + $unit;
		}

		.p-l {
			padding-left: $value + $unit;
		}

		.p-r {
			padding-right: $value + $unit;
		}
	}

	@else {
		.p-#{$name} {
			padding: $value + $unit;
		}

		.p-x-#{$name} {
			padding-left: $value + $unit;
			padding-right: $value + $unit;
		}

		.p-y-#{$name} {
			padding-top: $value + $unit;
			padding-bottom: $value + $unit;
		}

		.p-l-#{$name} {
			padding-left: $value + $unit;
		}

		.p-r-#{$name} {
			padding-right: $value + $unit;
		}

		.p-t-#{$name} {
			padding-top: $value + $unit;
		}

		.p-b-#{$name} {
			padding-bottom: $value + $unit;
		}
	}

}

@each $value in $sizes {
	@include padding-variant($value, $value);
}

@each $name,
$value in $sizes-map {
	@include padding-variant($name, $value);
}